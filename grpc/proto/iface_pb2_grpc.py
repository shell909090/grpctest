# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import iface_pb2 as iface__pb2


class AddStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Add = channel.unary_unary(
                '/proto.Add/Add',
                request_serializer=iface__pb2.AddRequest.SerializeToString,
                response_deserializer=iface__pb2.AddResponse.FromString,
                )
        self.Sum = channel.stream_unary(
                '/proto.Add/Sum',
                request_serializer=iface__pb2.SumRequest.SerializeToString,
                response_deserializer=iface__pb2.SumResponse.FromString,
                )


class AddServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Add(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sum(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=iface__pb2.AddRequest.FromString,
                    response_serializer=iface__pb2.AddResponse.SerializeToString,
            ),
            'Sum': grpc.stream_unary_rpc_method_handler(
                    servicer.Sum,
                    request_deserializer=iface__pb2.SumRequest.FromString,
                    response_serializer=iface__pb2.SumResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.Add', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Add(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Add/Add',
            iface__pb2.AddRequest.SerializeToString,
            iface__pb2.AddResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sum(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/proto.Add/Sum',
            iface__pb2.SumRequest.SerializeToString,
            iface__pb2.SumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RangeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Range = channel.unary_stream(
                '/proto.Range/Range',
                request_serializer=iface__pb2.RangeRequest.SerializeToString,
                response_deserializer=iface__pb2.RangeResponse.FromString,
                )


class RangeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Range(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RangeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Range': grpc.unary_stream_rpc_method_handler(
                    servicer.Range,
                    request_deserializer=iface__pb2.RangeRequest.FromString,
                    response_serializer=iface__pb2.RangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.Range', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Range(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Range(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/proto.Range/Range',
            iface__pb2.RangeRequest.SerializeToString,
            iface__pb2.RangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EchoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Echo = channel.stream_stream(
                '/proto.Echo/Echo',
                request_serializer=iface__pb2.EchoRequest.SerializeToString,
                response_deserializer=iface__pb2.EchoResponse.FromString,
                )


class EchoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Echo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Echo': grpc.stream_stream_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=iface__pb2.EchoRequest.FromString,
                    response_serializer=iface__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.Echo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Echo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Echo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.Echo/Echo',
            iface__pb2.EchoRequest.SerializeToString,
            iface__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
